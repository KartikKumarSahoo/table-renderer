{"version":3,"sources":["data.js","Table.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["Class1","Name","Maths","Science","English","Geography","History","Status","Class2","Class3","Table","props","title","data","className","onRowClick","headings","Object","keys","map","heading","key","row","values","name","onClick","e","stopPropagation","Class","handleRowClick","value","generateClassStats","reduce","acc","klassName","classStat","students","Students","length","passedStudents","filter","student","Pass","Fail","push","App","useState","currentClass","setCurrentClass","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAAe,G,MAAA,CACbA,OAAQ,CACN,CACEC,KAAM,OACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,OAAQ,QAEV,CACEN,KAAM,SACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,OAAQ,SAGZC,OAAQ,CACN,CACEP,KAAM,OACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,OAAQ,QAEV,CACEN,KAAM,SACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,OAAQ,SAGZE,OAAQ,CACN,CACER,KAAM,QACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,OAAQ,WC/CC,SAASG,IAAmB,IAAbC,EAAY,uDAAJ,GAC5BC,EAAuDD,EAAvDC,MADgC,EACuBD,EAAhDE,YADyB,MAClB,GADkB,EACdC,EAAqCH,EAArCG,UADc,EACuBH,EAA1BI,kBADG,MACU,aADV,EAElCC,EAAWC,OAAOC,KAAKL,EAAK,IAMlC,OACE,yBAAKC,UAAS,0BAAqBA,IAChCF,GAAS,4BAAKA,GACf,+BACE,+BACGI,EAASG,KAAI,SAAAC,GAAO,OACnB,wBAAIC,IAAKD,GAAUA,OAGvB,+BACGP,EAAKM,KAAI,SAAAG,GACR,IAAMC,EAASN,OAAOM,OAAOD,GAC7B,OACE,wBAAID,IAAKC,EAAIE,KAAMC,QAAS,SAAAC,GAAC,OAlBlB,SAACJ,EAAKI,GAC3BA,EAAEC,kBACFZ,EAAWO,EAAIM,OAgB4BC,CAAeP,EAAKI,KAClDH,EAAOJ,KAAI,SAAAW,GAAK,OACf,wBAAIT,IAAKS,GAAQA,aCzB5B,IAAMC,EAAqB,WAAgB,IAAflB,EAAc,uDAAP,GACxC,OAAOI,OAAOC,KAAKL,GAAMmB,QAAO,SAACC,EAAKC,GACpC,IAAMC,EAAY,CAAEP,MAAOM,GACrBE,EAAWvB,EAAKqB,GAEtBC,EAAUE,SAAWD,EAASE,OAC9B,IAAMC,EAAiBH,EAASI,QAC9B,SAAAC,GAAO,MAAuB,SAAnBA,EAAQlC,UAMrB,OAJA4B,EAAUO,KAAOH,EAAeD,OAChCH,EAAUQ,KAAOP,EAASE,OAASC,EAAeD,OAElDL,EAAIW,KAAKT,GACFF,IACN,KCgBUY,MAxBf,WAAgB,IAAD,EAC2BC,mBAAS,MADpC,mBACNC,EADM,KACQC,EADR,KAGb,OACE,yBAAKlC,UAAU,OACb,kBAACJ,EAAD,CACEE,MAAM,cACNE,UAAU,cACVD,KAAMkB,EAAmBlB,GACzBE,WAAY,SAAAmB,GACVc,EAAgBd,MAGnBa,GACC,kBAACrC,EAAD,CACEE,MAAK,yBAAoBmC,EAApB,KACLjC,UAAU,gBACVD,KAAMA,EAAKkC,OCXDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c16fef4.chunk.js","sourcesContent":["export default {\n  Class1: [\n    {\n      Name: \"Tony\",\n      Maths: 80,\n      Science: 50,\n      English: 80,\n      Geography: 70,\n      History: 50,\n      Status: \"pass\"\n    },\n    {\n      Name: \"Samuel\",\n      Maths: 80,\n      Science: 80,\n      English: 80,\n      Geography: 80,\n      History: 80,\n      Status: \"fail\"\n    }\n  ],\n  Class2: [\n    {\n      Name: \"John\",\n      Maths: 50,\n      Science: 50,\n      English: 40,\n      Geography: 60,\n      History: 30,\n      Status: \"fail\"\n    },\n    {\n      Name: \"Tinkle\",\n      Maths: 25,\n      Science: 40,\n      English: 30,\n      Geography: 50,\n      History: 30,\n      Status: \"fail\"\n    }\n  ],\n  Class3: [\n    {\n      Name: \"Angel\",\n      Maths: 80,\n      Science: 70,\n      English: 80,\n      Geography: 70,\n      History: 50,\n      Status: \"pass\"\n    }\n  ]\n};\n","import React from \"react\";\n\nexport default function Table(props = {}) {\n  const { title, data = [], className, onRowClick = () => {} } = props;\n  const headings = Object.keys(data[0]);\n  const handleRowClick = (row, e) => {\n    e.stopPropagation();\n    onRowClick(row.Class);\n  };\n\n  return (\n    <div className={`table-container ${className}`}>\n      {title && <h2>{title}</h2>}\n      <table>\n        <thead>\n          {headings.map(heading => (\n            <th key={heading}>{heading}</th>\n          ))}\n        </thead>\n        <tbody>\n          {data.map(row => {\n            const values = Object.values(row);\n            return (\n              <tr key={row.name} onClick={e => handleRowClick(row, e)}>\n                {values.map(value => (\n                  <td key={value}>{value}</td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","export const generateClassStats = (data = {}) => {\n  return Object.keys(data).reduce((acc, klassName) => {\n    const classStat = { Class: klassName };\n    const students = data[klassName];\n\n    classStat.Students = students.length;\n    const passedStudents = students.filter(\n      student => student.Status === \"pass\"\n    );\n    classStat.Pass = passedStudents.length;\n    classStat.Fail = students.length - passedStudents.length;\n\n    acc.push(classStat);\n    return acc;\n  }, []);\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport data from \"./data\";\nimport Table from \"./Table\";\nimport { generateClassStats } from \"./utils\";\n\nfunction App() {\n  const [currentClass, setCurrentClass] = useState(null);\n\n  return (\n    <div className=\"app\">\n      <Table\n        title=\"Class Table\"\n        className=\"class-table\"\n        data={generateClassStats(data)}\n        onRowClick={klassName => {\n          setCurrentClass(klassName);\n        }}\n      />\n      {currentClass && (\n        <Table\n          title={`Student Table (${currentClass})`}\n          className=\"student-table\"\n          data={data[currentClass]}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}